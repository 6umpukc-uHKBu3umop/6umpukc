#!/usr/bin/env perl
use 5.016;
use warnings;
use FindBin qw($RealBin $Bin $Script);

sub is_mingw() {
    my $msystem = exists $ENV{'MSYSTEM'} ? $ENV{'MSYSTEM'} : '';
    if (($msystem eq 'MINGW64') or ($msystem eq 'MINGW32') or ($msystem eq 'MSYS')) {
        return 1;
    }
    return 0;
}

sub file_get_contents {
    my $filename = shift;
    my $result = '';
    if (open(my $fh, '<:encoding(UTF-8)', $filename)) {
        while (my $line = <$fh>) {
            $result .= $line;
        }
    }
    return $result;
}

sub file_put_contents {
    my $filename = shift;
    my $content = shift;
    if (open(my $fh, '>:encoding(UTF-8)', $filename)) {
        print $fh $content;
        close $fh;
        return 1;
    }
    return 0;
}

sub trim {
    my $s = shift;
    $s =~ s/^\s+|\s+$//g;
    return $s;
}

sub confirm_continue {
    my $title = shift;
    print $title . " Type 'yes' to continue: ";
    my $line = <STDIN>;
    chomp $line;
    return trim($line) eq 'yes';
}

sub require_command {
    my $cmd = shift;
    my $test = 'which ' . $cmd;
    if (qx{$test} eq '') {
        die('[' . $cmd . '] command - not found.');
    }
}

sub request_useragent {
    return 'Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0';
}

sub request_get {
    require_command('curl');

    my ($url, $outfile) = @_;
    my $result = '';
    my $cmd = "curl -L '$url'"
        . " -A '" . request_useragent() . "'";
    if ($outfile && ($outfile ne '')) {
        $cmd .= " -o '$outfile'";
    }
    $result = qx{$cmd};
    return $result;
}

sub action_install {
    my $homeBin = $ENV{'HOME'} . '/bin';
    if (!-d $homeBin) {
        mkdir($homeBin);
    }

    if (is_mingw()) {
        my $fname = $ENV{'HOME'} . '/.bash_profile';
        my $initPath = 'PATH=$PATH:$HOME/bin/6umpukc';
        if (-f $fname) {
            my $content = file_get_contents($fname);
            if (index($content, $initPath) < 0) {
                file_put_contents($fname, $content . "\n" . $initPath . "\n");
            }
        }
        else {
            file_put_contents($fname, "\n" . $initPath . "\n");
        }
    }
    else {
        my $homeScript = $homeBin . '/' . $Script;
        if (-l $homeScript) {
            unlink($homeScript);
        }
        symlink($RealBin . '/' . $Script, $homeScript);
    }

    my $releasesUrl = 'https://github.com/whateveruse/6umpukc/releases/';
    if (confirm_continue("Install compiled bx from $releasesUrl ?")) {
        say 'TODO!!! download bx.exe from releases';
        #request_get($srcUrl, $outputFile);
    }
    elsif (confirm_continue('Compile bx (for speed up the launching)?')) {
        system "dart compile exe '$RealBin/bx.dart'";
    }
    else {
        say 'You must install Dart https://dart.dev/get-dart';
        say "  or download bx.exe from $releasesUrl to ~/bin/6umpukc/";
    }
}

if (defined($ARGV[0]) && ($ARGV[0] eq 'self-install')) {
    action_install();
}
else {
    my $args = join(' ', @ARGV);
    if (-f "$RealBin/bx.exe") {
        system "$RealBin/bx.exe $args";
    }
    else {
        system "dart run '$RealBin/bx.dart' $args";
    }
}


